namespace Andreas.PowerGrip.Shared.Linux.Enumerations;

/// <summary>
/// Represents POSIX signals used with the <c>kill</c> system call. 
/// Each enum value corresponds to a specific signal number and function.
/// </summary>
public enum UnixSignal
{
    /// <summary>
    /// Poll (0) - Checks if a process exists.
    /// </summary>
    Poll = 0,
    
    /// <summary>
    /// SIGHUP (1) - Sent to a process when its controlling terminal is closed. 
    /// Often used to signal a daemon to reload its configuration.
    /// </summary>
    Hangup = 1,

    /// <summary>
    /// SIGINT (2) - Interrupt signal, typically sent when the user presses Ctrl+C. 
    /// Used to request process termination.
    /// </summary>
    Interrupt = 2,

    /// <summary>
    /// SIGQUIT (3) - Quit signal, usually sent when the user presses Ctrl+\.
    /// Generates a core dump and terminates the process.
    /// </summary>
    Quit = 3,

    /// <summary>
    /// SIGILL (4) - Indicates an illegal CPU instruction was executed. 
    /// Often caused by corrupt binaries or exploiting vulnerabilities.
    /// </summary>
    IllegalInstruction = 4,

    /// <summary>
    /// SIGTRAP (5) - Sent to a process when a debugger breakpoint or trace event occurs. 
    /// Used for debugging purposes.
    /// </summary>
    Trap = 5,

    /// <summary>
    /// SIGABRT (6) - Abnormal termination request sent by the `abort()` function.
    /// Commonly used to signal a critical failure in a program.
    /// </summary>
    Abort = 6,

    /// <summary>
    /// SIGBUS (7) - Indicates a memory access error, such as an unaligned memory access.
    /// Similar to a segmentation fault but for hardware-specific issues.
    /// </summary>
    BusError = 7,

    /// <summary>
    /// SIGFPE (8) - Floating-point exception, such as division by zero.
    /// Usually caused by invalid arithmetic operations.
    /// </summary>
    FloatingPointException = 8,

    /// <summary>
    /// SIGKILL (9) - Forces immediate process termination.
    /// Cannot be caught, blocked, or ignored. Used to kill unresponsive processes.
    /// </summary>
    Kill = 9,

    /// <summary>
    /// SIGUSR1 (10) - User-defined signal 1. 
    /// Applications can use this signal for custom behavior.
    /// </summary>
    User1 = 10,

    /// <summary>
    /// SIGSEGV (11) - Segmentation fault, sent when a process accesses an invalid memory address.
    /// Typically indicates an attempt to dereference a null or corrupted pointer.
    /// </summary>
    SegmentationFault = 11,

    /// <summary>
    /// SIGUSR2 (12) - User-defined signal 2.
    /// Like SIGUSR1, this can be used for custom behavior in applications.
    /// </summary>
    User2 = 12,

    /// <summary>
    /// SIGPIPE (13) - Broken pipe error.
    /// Sent when a process writes to a pipe with no readers, preventing crashes.
    /// </summary>
    BrokenPipe = 13,

    /// <summary>
    /// SIGALRM (14) - Timer signal generated by the `alarm()` system call.
    /// Used to notify processes of timeouts.
    /// </summary>
    Alarm = 14,

    /// <summary>
    /// SIGTERM (15) - Requests a process to terminate gracefully.
    /// Unlike SIGKILL, this allows the process to clean up resources before exiting.
    /// </summary>
    Terminate = 15,

    /// <summary>
    /// SIGSTKFLT (16) - Stack fault on coprocessor (unused on most platforms).
    /// Rarely encountered in modern Linux systems.
    /// </summary>
    StackFault = 16,

    /// <summary>
    /// SIGCHLD (17) - Sent to a parent process when a child process terminates or stops.
    /// Used to prevent zombie processes.
    /// </summary>
    Child = 17,

    /// <summary>
    /// SIGCONT (18) - Continues a stopped process.
    /// Often used to resume a process after receiving SIGSTOP or SIGTSTP.
    /// </summary>
    Continue = 18,

    /// <summary>
    /// SIGSTOP (19) - Stops a process immediately.
    /// Unlike SIGTSTP, this signal cannot be ignored or caught.
    /// </summary>
    Stop = 19,

    /// <summary>
    /// SIGTSTP (20) - Suspends a process from the terminal (e.g., Ctrl+Z).
    /// Unlike SIGSTOP, the process can choose to handle it.
    /// </summary>
    TerminalStop = 20,

    /// <summary>
    /// SIGTTIN (21) - Sent to background processes attempting to read from the terminal.
    /// Causes the process to stop until resumed.
    /// </summary>
    BackgroundRead = 21,

    /// <summary>
    /// SIGTTOU (22) - Sent to background processes attempting to write to the terminal.
    /// Like SIGTTIN, it causes the process to stop.
    /// </summary>
    BackgroundWrite = 22,

    /// <summary>
    /// SIGURG (23) - Indicates an urgent condition on a socket.
    /// Used for out-of-band data notifications.
    /// </summary>
    Urgent = 23,

    /// <summary>
    /// SIGXCPU (24) - Sent when a process exceeds its CPU time limit.
    /// Can be used to warn or terminate long-running processes.
    /// </summary>
    CpuTimeExceeded = 24,

    /// <summary>
    /// SIGXFSZ (25) - Sent when a process exceeds its file size limit.
    /// Prevents applications from writing excessively large files.
    /// </summary>
    FileSizeExceeded = 25,

    /// <summary>
    /// SIGVTALRM (26) - Virtual timer alarm.
    /// Used by processes to measure CPU time spent in user mode.
    /// </summary>
    VirtualAlarm = 26,

    /// <summary>
    /// SIGPROF (27) - Profiling timer expiration.
    /// Used for performance profiling in applications.
    /// </summary>
    Profiling = 27,

    /// <summary>
    /// SIGWINCH (28) - Window size change signal.
    /// Sent to processes when the terminal window is resized.
    /// </summary>
    WindowChange = 28,

    /// <summary>
    /// SIGIO (29) - I/O event signal.
    /// Used to notify processes of available I/O operations.
    /// </summary>
    IO = 29,

    /// <summary>
    /// SIGPWR (30) - Power failure signal.
    /// Rarely used, but some systems use it for power management events.
    /// </summary>
    PowerFailure = 30,

    /// <summary>
    /// SIGSYS (31) - Bad system call.
    /// Sent when a process attempts to execute an invalid system call.
    /// </summary>
    BadSystemCall = 31
}